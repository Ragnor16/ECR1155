// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";

contract NFTMarketplaceToken is ERC1155 {
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;

    uint256 public constant SecureKloud = 1;
    uint256 public constant Kloud = 3;

    mapping(uint256 => string) private metadatas;

    struct NFT {
        uint256 id;
        address owner;
        string title;
        string description;
        uint256 price;
        uint256 availableCount;
    }

    mapping(string => NFT) private nfts;

    constructor() ERC1155("https://fuchsia-atomic-catshark-392.mypinata.cloud") {}

    function mint(uint256 tokenCount, string calldata dataHash, uint256 priceInEther) public returns(uint256) {
        _tokenIds.increment();
        uint256 newItemId = _tokenIds.current();
        _mint(msg.sender, newItemId, tokenCount, "");
        metadatas[newItemId] = dataHash;

        if (nfts[dataHash].id == 0) {
            nfts[dataHash] = NFT(newItemId, msg.sender, "", "", priceInEther, tokenCount);
        } else {
            nfts[dataHash].availableCount += tokenCount;
        }

        return newItemId;
    }

    function totalNFTs() public view returns(uint256) {
        return _tokenIds.current();
    }

    function uri(uint256 tokenId) public view override returns (string memory) {
        string memory hash = metadatas[tokenId];
        return hash;
    }

    function buyNFT(string calldata metaDataHash) public payable {
        NFT storage nft = nfts[metaDataHash];
        require(nft.id != 0, "NFT does not exist");
        require(nft.availableCount > 0, "NFTs not available for sale");
        require(nft.price > 0, "NFT not for sale");
        require(msg.value >= nft.price * 1 ether, "Insufficient funds sent");

        address payable owner = payable(nft.owner);
        owner.transfer(nft.price * 1 ether); // Transfer funds to the owner
        _safeTransferFrom(owner, msg.sender, nft.id, 1, ""); // Transfer the NFT to the buyer
        nft.availableCount--;
        if (nft.availableCount == 0) {
            nft.price = 0; // Mark the NFT as sold
        }
    }
}
